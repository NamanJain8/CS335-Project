
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLORleftLANDleftORleftXORleftANDleftEQLNEQleftLSSGTRLEQGEQleftSHLSHRleftADDSUBleftMULQUOREMADD ADD_ASSIGN AND AND_ASSIGN AND_NOT AND_NOT_ASSIGN ARROW ASSIGN BOOL BREAK CASE CHAN CHAR COLON COMMA COMPLEX CONST CONTINUE DEC DEFAULT DEFER DEFINE ELLIPSIS ELSE EQL FALLTHROUGH FLOAT FLOAT_LITERAL FOR FUNC GEQ GO GOTO GTR IDENT IF IMAG IMPORT INC INT INTERFACE INT_LITERAL LAND LBRACE LBRACK LEQ LOR LPAREN LSS MAP MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE PERIOD QUO QUO_ASSIGN RANGE RBRACE RBRACK REM REM_ASSIGN RETURN RPAREN SELECT SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRING_LITERAL STRUCT SUB SUB_ASSIGN SWITCH TYPE TYPECAST VAR XOR XOR_ASSIGNstart : SourceFileType : TypeToken\n                    | TypeLit\n                    | LPAREN Type RPARENTypeToken : INT\n                             | FLOAT\n                             | STRING\n                             | BOOL\n                             | TYPE IDENTTypeLit : ArrayType\n                       | StructType\n                       | PointerTypeArrayType : LBRACK ArrayLength RBRACK ElementType ArrayLength : INT_LITERAL ElementType : Type StructType : STRUCT LBRACE FieldDeclRep RBRACE FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                                    | epsilon  FieldDecl : IdentifierList TypePointerType : MUL BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                             | epsilonResult : Parameters\n                      | TypeParameters : LPAREN ParameterListOpt RPARENParameterListOpt : ParametersList\n                                                     | epsilonParametersList : Type\n                                      | IdentifierList Type\n                                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                                                     | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                                     | TypeBlock : LBRACE StatementList RBRACEStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                                    | epsilonDeclaration : ConstDecl\n                                   | TypeDecl\n                                   | VarDeclTopLevelDecl : Declaration\n                                    | FunctionDeclConstDecl : CONST ConstSpec\n                             | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                                    | epsilonConstSpec : IdentifierList Type ASSIGN ExpressionListIdentifierList : IDENT IdentifierRepIdentifierRep : IdentifierRep COMMA IDENT\n                                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                                     | epsilonTypeDecl : TYPE TypeSpec\n                            | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                               | epsilonTypeSpec : AliasDecl\n                            | TypeDefAliasDecl : IDENT ASSIGN TypeTypeDef : IDENT TypeVarDecl : VAR VarSpec\n                       | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                              | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n                       | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                                             | epsilon ShortVarDecl : IDENT DEFINE Expression FunctionDecl : FUNC FunctionName Function\n                                    | FUNC FunctionName SignatureFunctionName : IDENTFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n                       | OperandName\n                       | LPAREN Expression RPARENLiteral : BasicLitBasicLit : INT_LITERAL\n                            | FLOAT_LITERAL\n                            | STRING_LITERAL\n                            OperandName : IDENTPrimaryExpr : Operand\n                               | PrimaryExpr Selector\n                               | Conversion\n                               | PrimaryExpr Index\n                               | PrimaryExpr Slice\n                               | PrimaryExpr TypeAssertion\n                               | PrimaryExpr ArgumentsSelector : PERIOD IDENTIndex : LBRACK Expression RBRACKSlice : LBRACK ExpressionOpt COLON ExpressionOpt RBRACK\n                     | LBRACK ExpressionOpt COLON Expression COLON Expression RBRACKTypeAssertion : PERIOD LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                                                     | epsilonExpression : UnaryExpr\n                              | Expression BinaryOp ExpressionExpressionOpt : Expression\n                                     | epsilonUnaryExpr : PrimaryExpr\n                             | UnaryOp UnaryExpr\n                             | NOT UnaryExprBinaryOp : LOR\n                            | LAND\n                            | RelOp\n                            | AddMulOpRelOp : EQL\n                     | NEQ\n                     | LSS\n                     | GTR\n                     | LEQ\n                     | GEQAddMulOp : UnaryOp\n                            | OR\n                            | XOR\n                            | QUO\n                            | REM\n                            | SHL\n                            | SHRUnaryOp : ADD\n                       | SUB\n                       | MUL\n                       | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n                             | SimpleStmt\n                             | ReturnStmt\n                             | BreakStmt\n                             | ContinueStmt\n                             | Block\n                             | IfStmt\n                             | ForStmt  SimpleStmt : epsilon\n                                   | ExpressionStmt\n                                   | IncDecStmt\n                                   | Assignment\n                                   | ShortVarDecl  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                                   | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : ADD_ASSIGN\n                             | SUB_ASSIGN\n                             | MUL_ASSIGN\n                             | QUO_ASSIGN\n                             | REM_ASSIGN\n                             | AND_ASSIGN\n                             | OR_ASSIGN\n                             | XOR_ASSIGN\n                             | SHL_ASSIGN\n                             | SHR_ASSIGN\n                             | ASSIGN  IfStmt : IF Expression Block ElseOpt  ElseOpt : ELSE IfStmt\n                            | ELSE Block\n                            | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n                           | Condition\n                           | ForClause\n                           | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n                    | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n                           | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                           | epsilonBreakStmt : BREAKContinueStmt : CONTINUESourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n                     | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                                           | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTImportDecl : IMPORT ImportSpec\n                    | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n                          | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : PERIOD\n                                                  | PackageName\n                                                  | epsilon ImportPath : STRING_LITERAL epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-198,-198,-183,-182,-186,-184,-185,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,38,40,41,43,48,49,50,51,52,57,58,60,61,62,63,65,66,67,76,79,81,82,83,84,85,86,87,88,89,90,99,100,103,107,108,110,111,112,113,114,115,117,118,119,120,121,124,125,130,131,134,135,136,137,138,141,142,144,149,150,157,158,160,178,179,180,181,182,186,187,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,212,217,218,219,220,223,224,232,234,235,236,237,239,240,242,246,247,267,268,270,272,274,275,276,279,280,281,284,285,287,288,289,290,291,293,295,296,300,],[5,-187,-188,24,31,-44,-45,-41,-42,-43,-189,-46,-57,-61,-62,-65,-193,-197,-74,-75,-198,-2,-3,-5,-6,-7,-8,-10,-11,-12,-64,-198,-190,139,-77,-78,-198,-25,-22,-23,-24,-26,-47,148,-9,-20,-21,-58,155,-63,-66,156,-69,-72,-70,-198,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-198,-40,-27,-50,-4,-71,-54,-56,-88,-90,-91,-92,-93,-107,-108,-37,234,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-198,-180,-181,-144,-198,-86,-13,-15,-16,266,-103,-94,-81,-39,-177,-178,-179,-145,-146,-139,-144,276,-19,-55,-95,-99,-198,-164,-198,-147,-73,-98,-130,-160,-163,297,-171,-172,-169,-96,-161,-162,-97,]),'IDENT':([4,13,20,21,22,23,26,35,39,44,46,47,53,54,55,64,73,74,77,78,80,85,91,101,106,109,116,122,123,126,127,128,129,132,139,141,142,146,147,148,152,153,155,156,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,183,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,271,276,277,278,294,297,],[7,7,33,37,42,37,-198,-198,-198,-198,7,-192,37,37,-49,103,42,-60,37,-68,135,-198,37,135,-198,154,135,135,135,-126,-127,-128,-129,135,-191,212,-40,37,37,-48,37,-18,-59,-67,135,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,224,135,135,135,135,212,135,135,-39,135,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,135,-17,135,135,135,-159,135,212,]),'IMPORT':([5,8,9,24,],[-198,13,-183,-184,]),'FUNC':([5,8,9,10,12,24,31,],[-198,-198,-183,20,-186,-184,-185,]),'CONST':([5,8,9,10,12,24,31,85,141,142,234,],[-198,-198,-183,21,-186,-184,-185,-198,21,-40,-39,]),'TYPE':([5,8,9,10,12,24,31,36,37,42,45,52,53,59,70,71,72,75,85,91,96,133,141,142,144,146,147,151,154,214,221,225,234,],[-198,-198,-183,22,-186,-184,-185,64,-198,64,64,64,64,64,64,-51,-53,64,-198,64,64,64,22,-40,-27,64,64,64,-52,64,64,64,-39,]),'VAR':([5,8,9,10,12,24,31,85,141,142,234,],[-198,-198,-183,23,-186,-184,-185,-198,23,-40,-39,]),'STRING_LITERAL':([7,13,26,27,28,29,30,46,47,80,85,101,116,122,123,126,127,128,129,132,139,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,271,276,277,278,294,297,],[-188,-198,-198,49,-194,-195,-196,-198,-192,138,-198,138,138,138,138,-126,-127,-128,-129,138,-191,138,-40,138,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,138,138,138,138,138,138,138,-39,138,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,138,138,138,138,-159,138,138,]),'LPAREN':([13,21,22,23,32,33,36,37,42,45,52,53,57,58,59,60,61,62,63,65,66,67,70,71,72,75,80,85,91,96,101,103,107,108,116,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,142,144,146,147,150,151,154,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,189,205,208,210,212,214,217,218,219,221,222,224,225,232,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,270,271,272,276,277,278,281,284,293,294,297,300,],[26,35,39,44,53,-76,59,-198,59,59,91,59,-2,-3,59,-5,-6,-7,-8,-10,-11,-12,59,-51,-53,59,132,-198,59,59,132,-9,-20,-21,132,185,132,132,-87,-89,-126,-127,-128,-129,-79,-80,132,59,-82,-86,-83,-84,-85,132,-40,-27,59,59,-4,59,-52,132,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-88,-90,-91,-92,-93,225,132,132,233,132,132,132,-86,59,-13,-15,-16,59,132,-94,59,-81,132,-39,132,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,132,-95,132,-99,132,132,-159,-98,-130,-96,132,132,-97,]),'PERIOD':([13,26,46,47,121,124,125,130,131,134,135,136,137,138,139,178,179,180,181,182,212,224,232,270,272,281,284,293,300,],[28,-198,28,-192,183,-87,-89,-79,-80,-82,-86,-83,-84,-85,-191,-88,-90,-91,-92,-93,-86,-94,-81,-95,-99,-98,-130,-96,-97,]),'RPAREN':([26,35,39,44,46,47,53,54,55,57,58,60,61,62,63,65,66,67,73,74,77,78,91,92,93,94,95,97,102,103,107,108,119,120,121,124,125,130,131,134,135,136,137,138,139,143,145,148,150,155,156,158,160,178,179,180,181,182,185,186,187,188,213,215,216,217,218,219,223,224,229,230,231,232,265,268,269,270,272,273,281,284,293,300,],[-198,-198,-198,-198,81,-192,-198,99,-49,-2,-3,-5,-6,-7,-8,-10,-11,-12,110,-60,113,-68,-198,144,-28,-29,-30,-32,150,-9,-20,-21,-198,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-191,150,-31,-48,-4,-59,-67,-54,-56,-88,-90,-91,-92,-93,-198,-107,-108,232,-33,-36,-34,-13,-15,-16,-103,-94,272,-100,-101,-81,-35,-55,281,-95,-99,284,-98,-130,-96,-97,]),'INT':([36,37,42,45,52,53,59,70,71,72,75,91,96,133,144,146,147,151,154,214,221,225,],[60,-198,60,60,60,60,60,60,-51,-53,60,60,60,60,-27,60,60,60,-52,60,60,60,]),'FLOAT':([36,37,42,45,52,53,59,70,71,72,75,91,96,133,144,146,147,151,154,214,221,225,],[61,-198,61,61,61,61,61,61,-51,-53,61,61,61,61,-27,61,61,61,-52,61,61,61,]),'STRING':([36,37,42,45,52,53,59,70,71,72,75,91,96,133,144,146,147,151,154,214,221,225,],[62,-198,62,62,62,62,62,62,-51,-53,62,62,62,62,-27,62,62,62,-52,62,62,62,]),'BOOL':([36,37,42,45,52,53,59,70,71,72,75,91,96,133,144,146,147,151,154,214,221,225,],[63,-198,63,63,63,63,63,63,-51,-53,63,63,63,63,-27,63,63,63,-52,63,63,63,]),'LBRACK':([36,37,42,45,52,53,59,70,71,72,75,91,96,121,124,125,130,131,133,134,135,136,137,138,144,146,147,151,154,178,179,180,181,182,212,214,221,224,225,232,270,272,281,284,293,300,],[68,-198,68,68,68,68,68,68,-51,-53,68,68,68,184,-87,-89,-79,-80,68,-82,-86,-83,-84,-85,-27,68,68,68,-52,-88,-90,-91,-92,-93,-86,68,68,-94,68,-81,-95,-99,-98,-130,-96,-97,]),'STRUCT':([36,37,42,45,52,53,59,70,71,72,75,91,96,133,144,146,147,151,154,214,221,225,],[69,-198,69,69,69,69,69,69,-51,-53,69,69,69,69,-27,69,69,69,-52,69,69,69,]),'MUL':([36,37,42,45,52,53,59,70,71,72,75,80,85,91,96,101,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,141,142,144,146,147,151,154,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,205,208,209,210,212,214,221,222,223,224,225,226,232,233,234,238,246,251,252,253,254,255,256,257,258,259,260,261,262,263,264,268,270,271,272,273,276,277,278,280,281,283,284,291,292,293,294,297,298,300,],[70,-198,70,70,70,70,70,70,-51,-53,70,128,-198,70,70,128,128,128,-102,-106,128,128,-87,-89,-126,-127,-128,-129,-79,-80,128,70,-82,-86,-83,-84,-85,128,-40,-27,70,70,70,-52,128,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-88,-90,-91,-92,-93,128,128,-107,-108,128,128,128,128,128,-86,70,70,128,128,-94,70,128,-81,128,-39,128,128,128,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,128,128,-95,128,-99,128,128,128,-159,128,-98,128,-130,128,128,-96,128,128,128,-97,]),'COMMA':([37,57,58,60,61,62,63,65,66,67,71,72,95,97,98,103,107,108,119,120,121,124,125,130,131,134,135,136,137,138,143,145,150,154,158,160,178,179,180,181,182,186,187,209,212,213,215,216,217,218,219,223,224,232,246,265,268,270,272,281,284,293,300,],[-198,-2,-3,-5,-6,-7,-8,-10,-11,-12,109,-53,-36,146,147,-9,-20,-21,-198,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-36,-35,-4,-52,222,-56,-88,-90,-91,-92,-93,-107,-108,-198,-86,-33,-36,-34,-13,-15,-16,-103,-94,-81,-198,-35,-55,-95,-99,-98,-130,-96,-97,]),'ASSIGN':([37,42,45,56,57,58,60,61,62,63,65,66,67,71,72,79,103,107,108,120,121,124,125,130,131,134,135,136,137,138,150,154,158,160,178,179,180,181,182,186,187,209,211,212,217,218,219,223,224,232,246,250,268,270,272,281,284,293,300,],[-198,75,80,101,-2,-3,-5,-6,-7,-8,-10,-11,-12,-51,-53,116,-9,-20,-21,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-4,-52,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,263,-86,-13,-15,-16,-103,-94,-81,-198,278,-55,-95,-99,-98,-130,-96,-97,]),'LBRACE':([51,52,57,58,60,61,62,63,65,66,67,69,85,86,87,88,89,90,103,107,108,119,120,121,124,125,130,131,134,135,136,137,138,141,142,144,150,158,160,178,179,180,181,182,186,187,200,201,202,203,204,209,210,212,217,218,219,223,224,232,234,238,239,240,241,242,243,244,245,246,268,270,272,279,280,281,284,286,292,293,297,299,300,],[85,-198,-2,-3,-5,-6,-7,-8,-10,-11,-12,106,-198,-25,-22,-23,-24,-26,-9,-20,-21,-198,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,85,-40,-27,-4,-54,-56,-88,-90,-91,-92,-93,-107,-108,-139,-140,-141,-142,-143,-144,-198,-86,-13,-15,-16,-103,-94,-81,-39,85,-145,-146,85,-165,-166,-167,-168,-169,-55,-95,-99,-147,-73,-98,-130,85,-173,-96,-198,-170,-97,]),'INT_LITERAL':([68,80,85,101,116,122,123,126,127,128,129,132,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,271,276,277,278,294,297,],[105,136,-198,136,136,136,136,-126,-127,-128,-129,136,136,-40,136,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,136,136,136,136,136,136,136,-39,136,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,136,136,136,136,-159,136,136,]),'NOT':([80,85,101,116,122,123,126,127,128,129,132,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,271,276,277,278,294,297,],[123,-198,123,123,123,123,-126,-127,-128,-129,123,123,-40,123,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,123,123,123,123,123,123,123,-39,123,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,123,123,123,123,-159,123,123,]),'ADD':([80,85,101,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,205,208,209,210,212,222,223,224,226,232,233,234,238,246,251,252,253,254,255,256,257,258,259,260,261,262,263,264,268,270,271,272,273,276,277,278,280,281,283,284,291,292,293,294,297,298,300,],[126,-198,126,126,126,-102,-106,126,126,-87,-89,-126,-127,-128,-129,-79,-80,126,-82,-86,-83,-84,-85,126,-40,126,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-88,-90,-91,-92,-93,126,126,-107,-108,126,126,126,126,126,-86,126,126,-94,126,-81,126,-39,126,126,126,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,126,126,-95,126,-99,126,126,126,-159,126,-98,126,-130,126,126,-96,126,126,126,-97,]),'SUB':([80,85,101,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,205,208,209,210,212,222,223,224,226,232,233,234,238,246,251,252,253,254,255,256,257,258,259,260,261,262,263,264,268,270,271,272,273,276,277,278,280,281,283,284,291,292,293,294,297,298,300,],[127,-198,127,127,127,-102,-106,127,127,-87,-89,-126,-127,-128,-129,-79,-80,127,-82,-86,-83,-84,-85,127,-40,127,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-88,-90,-91,-92,-93,127,127,-107,-108,127,127,127,127,127,-86,127,127,-94,127,-81,127,-39,127,127,127,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,127,127,-95,127,-99,127,127,127,-159,127,-98,127,-130,127,127,-96,127,127,127,-97,]),'AND':([80,85,101,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,138,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,187,188,205,208,209,210,212,222,223,224,226,232,233,234,238,246,251,252,253,254,255,256,257,258,259,260,261,262,263,264,268,270,271,272,273,276,277,278,280,281,283,284,291,292,293,294,297,298,300,],[129,-198,129,129,129,-102,-106,129,129,-87,-89,-126,-127,-128,-129,-79,-80,129,-82,-86,-83,-84,-85,129,-40,129,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-88,-90,-91,-92,-93,129,129,-107,-108,129,129,129,129,129,-86,129,129,-94,129,-81,129,-39,129,129,129,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,129,129,-95,129,-99,129,129,129,-159,129,-98,129,-130,129,129,-96,129,129,129,-97,]),'TYPECAST':([80,85,101,116,122,123,126,127,128,129,132,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,271,276,277,278,294,297,],[133,-198,133,133,133,133,-126,-127,-128,-129,133,133,-40,133,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,133,133,133,133,133,133,133,-39,133,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,133,133,133,133,-159,133,133,]),'FLOAT_LITERAL':([80,85,101,116,122,123,126,127,128,129,132,141,142,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,184,185,205,208,210,222,233,234,251,252,253,254,255,256,257,258,259,260,261,262,263,264,271,276,277,278,294,297,],[137,-198,137,137,137,137,-126,-127,-128,-129,137,137,-40,137,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,137,137,137,137,137,137,137,-39,137,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,137,137,137,137,-159,137,137,]),'RETURN':([85,141,142,234,],[-198,205,-40,-39,]),'BREAK':([85,141,142,234,],[-198,206,-40,-39,]),'CONTINUE':([85,141,142,234,],[-198,207,-40,-39,]),'IF':([85,141,142,234,286,],[-198,208,-40,-39,208,]),'FOR':([85,141,142,234,],[-198,210,-40,-39,]),'RBRACE':([85,106,140,141,142,152,153,234,266,],[-198,-198,190,-38,-40,219,-18,-39,-17,]),'RBRACK':([104,105,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,223,224,226,228,232,270,271,272,281,282,283,284,293,298,300,],[151,-14,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,-103,-94,270,-105,-81,-95,-198,-99,-98,293,-104,-130,-96,300,-97,]),'LOR':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[161,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,161,161,-86,161,-94,161,-81,161,161,161,-95,-99,161,161,-98,161,-130,161,161,-96,161,-97,]),'LAND':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[162,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,162,162,-86,162,-94,162,-81,162,162,162,-95,-99,162,162,-98,162,-130,162,162,-96,162,-97,]),'EQL':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[165,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,165,165,-86,165,-94,165,-81,165,165,165,-95,-99,165,165,-98,165,-130,165,165,-96,165,-97,]),'NEQ':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[166,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,166,166,-86,166,-94,166,-81,166,166,166,-95,-99,166,166,-98,166,-130,166,166,-96,166,-97,]),'LSS':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[167,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,167,167,-86,167,-94,167,-81,167,167,167,-95,-99,167,167,-98,167,-130,167,167,-96,167,-97,]),'GTR':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[168,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,168,168,-86,168,-94,168,-81,168,168,168,-95,-99,168,168,-98,168,-130,168,168,-96,168,-97,]),'LEQ':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[169,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,169,169,-86,169,-94,169,-81,169,169,169,-95,-99,169,169,-98,169,-130,169,169,-96,169,-97,]),'GEQ':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[170,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,170,170,-86,170,-94,170,-81,170,170,170,-95,-99,170,170,-98,170,-130,170,170,-96,170,-97,]),'OR':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[172,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,172,172,-86,172,-94,172,-81,172,172,172,-95,-99,172,172,-98,172,-130,172,172,-96,172,-97,]),'XOR':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[173,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,173,173,-86,173,-94,173,-81,173,173,173,-95,-99,173,173,-98,173,-130,173,173,-96,173,-97,]),'QUO':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[174,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,174,174,-86,174,-94,174,-81,174,174,174,-95,-99,174,174,-98,174,-130,174,174,-96,174,-97,]),'REM':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[175,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,175,175,-86,175,-94,175,-81,175,175,175,-95,-99,175,175,-98,175,-130,175,175,-96,175,-97,]),'SHL':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[176,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,176,176,-86,176,-94,176,-81,176,176,176,-95,-99,176,176,-98,176,-130,176,176,-96,176,-97,]),'SHR':([119,120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,188,209,212,223,224,226,232,238,246,268,270,272,273,280,281,283,284,291,292,293,298,300,],[177,-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,177,177,-86,177,-94,177,-81,177,177,177,-95,-99,177,177,-98,177,-130,177,177,-96,177,-97,]),'INC':([120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,209,212,223,224,232,246,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,239,-86,-103,-94,-81,239,-95,-99,-98,-130,-96,-97,]),'DEC':([120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,186,187,209,212,223,224,232,246,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-107,-108,240,-86,-103,-94,-81,240,-95,-99,-98,-130,-96,-97,]),'ADD_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,253,-86,-103,-94,-81,-198,253,-55,-95,-99,-98,-130,-96,-97,]),'SUB_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,254,-86,-103,-94,-81,-198,254,-55,-95,-99,-98,-130,-96,-97,]),'MUL_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,255,-86,-103,-94,-81,-198,255,-55,-95,-99,-98,-130,-96,-97,]),'QUO_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,256,-86,-103,-94,-81,-198,256,-55,-95,-99,-98,-130,-96,-97,]),'REM_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,257,-86,-103,-94,-81,-198,257,-55,-95,-99,-98,-130,-96,-97,]),'AND_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,258,-86,-103,-94,-81,-198,258,-55,-95,-99,-98,-130,-96,-97,]),'OR_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,259,-86,-103,-94,-81,-198,259,-55,-95,-99,-98,-130,-96,-97,]),'XOR_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,260,-86,-103,-94,-81,-198,260,-55,-95,-99,-98,-130,-96,-97,]),'SHL_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,261,-86,-103,-94,-81,-198,261,-55,-95,-99,-98,-130,-96,-97,]),'SHR_ASSIGN':([120,121,124,125,130,131,134,135,136,137,138,158,160,178,179,180,181,182,186,187,209,211,212,223,224,232,246,250,268,270,272,281,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-54,-56,-88,-90,-91,-92,-93,-107,-108,-198,262,-86,-103,-94,-81,-198,262,-55,-95,-99,-98,-130,-96,-97,]),'COLON':([120,121,124,125,130,131,134,135,136,137,138,178,179,180,181,182,184,186,187,223,224,226,227,228,232,270,272,281,283,284,293,300,],[-102,-106,-87,-89,-79,-80,-82,-86,-83,-84,-85,-88,-90,-91,-92,-93,-198,-107,-108,-103,-94,-104,271,-105,-81,-95,-99,-98,294,-130,-96,-97,]),'ELSE':([190,274,],[-37,286,]),'RANGE':([210,242,248,249,278,],[-198,-174,277,-175,-176,]),'DEFINE':([212,],[264,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,46,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,37,39,44,46,52,53,79,85,91,106,119,141,184,185,205,209,210,246,271,274,276,297,],[9,12,30,47,55,72,74,78,30,89,94,117,142,94,153,160,200,228,231,237,160,242,160,228,287,289,200,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,141,],[15,192,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,141,],[17,17,]),'TypeDecl':([10,141,],[18,18,]),'VarDecl':([10,141,],[19,19,]),'ImportSpec':([13,46,],[25,82,]),'PackageNameDotOpt':([13,46,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,54,],[34,100,]),'IdentifierList':([21,23,53,54,77,91,146,147,152,],[36,45,96,36,45,96,214,214,221,]),'TypeSpec':([22,73,],[38,111,]),'AliasDecl':([22,73,],[40,40,]),'TypeDef':([22,73,],[41,41,]),'VarSpec':([23,77,],[43,114,]),'ImportSpecRep':([26,],[46,]),'ImportPath':([27,],[48,]),'Function':([32,],[50,]),'Signature':([32,],[51,]),'Parameters':([32,52,],[52,86,]),'ConstSpecRep':([35,],[54,]),'Type':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[56,76,79,90,95,102,108,112,143,145,189,215,215,218,265,267,269,]),'TypeToken':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'TypeLit':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'ArrayType':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'StructType':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'PointerType':([36,42,45,52,53,59,70,75,91,96,133,146,147,151,214,221,225,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'IdentifierRep':([37,],[71,]),'TypeSpecRep':([39,],[73,]),'VarSpecRep':([44,],[77,]),'FunctionBody':([51,],[83,]),'Block':([51,141,238,241,286,],[84,197,274,275,296,]),'ResultOpt':([52,],[87,]),'Result':([52,],[88,]),'ParameterListOpt':([53,91,],[92,92,]),'ParametersList':([53,91,],[93,93,]),'ParameterDeclCommaRep':([53,91,],[97,97,]),'ParameterDecl':([53,91,146,147,],[98,98,213,216,]),'ArrayLength':([68,],[104,]),'BaseType':([70,],[107,]),'ExpressionListOpt':([79,],[115,]),'ExpressionList':([80,101,116,141,185,205,210,251,297,],[118,149,157,211,230,236,250,279,211,]),'Expression':([80,101,116,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[119,119,119,188,209,223,226,119,119,238,246,268,273,119,280,283,291,292,298,209,]),'UnaryExpr':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[120,120,120,186,187,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'PrimaryExpr':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'UnaryOp':([80,101,116,119,122,123,132,141,159,184,185,188,205,208,209,210,222,223,226,233,238,246,251,264,268,271,273,276,277,280,283,291,292,294,297,298,],[122,122,122,171,122,122,122,122,122,122,122,171,122,122,171,122,122,171,171,122,171,171,122,122,171,122,171,122,122,171,171,171,171,122,122,171,]),'Operand':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'Conversion':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'Literal':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'OperandName':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'BasicLit':([80,101,116,122,123,132,141,159,184,185,205,208,210,222,233,251,264,271,276,277,294,297,],[134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,]),'StatementList':([85,],[140,]),'StatementRep':([85,],[141,]),'FieldDeclRep':([106,],[152,]),'ExpressionRep':([119,209,246,],[158,158,158,]),'BinaryOp':([119,188,209,223,226,238,246,268,273,280,283,291,292,298,],[159,159,159,159,159,159,159,159,159,159,159,159,159,159,]),'RelOp':([119,188,209,223,226,238,246,268,273,280,283,291,292,298,],[163,163,163,163,163,163,163,163,163,163,163,163,163,163,]),'AddMulOp':([119,188,209,223,226,238,246,268,273,280,283,291,292,298,],[164,164,164,164,164,164,164,164,164,164,164,164,164,164,]),'Selector':([121,],[178,]),'Index':([121,],[179,]),'Slice':([121,],[180,]),'TypeAssertion':([121,],[181,]),'Arguments':([121,],[182,]),'Statement':([141,],[191,]),'SimpleStmt':([141,210,297,],[193,247,299,]),'ReturnStmt':([141,],[194,]),'BreakStmt':([141,],[195,]),'ContinueStmt':([141,],[196,]),'IfStmt':([141,286,],[198,295,]),'ForStmt':([141,],[199,]),'ExpressionStmt':([141,210,297,],[201,201,201,]),'IncDecStmt':([141,210,297,],[202,202,202,]),'Assignment':([141,210,297,],[203,203,203,]),'ShortVarDecl':([141,210,297,],[204,204,204,]),'ElementType':([151,],[217,]),'FieldDecl':([152,],[220,]),'ExpressionOpt':([184,271,],[227,282,]),'ExpressionListTypeOpt':([185,],[229,]),'ExpressionListPureOpt':([205,],[235,]),'ConditionBlockOpt':([210,],[241,]),'Condition':([210,276,],[243,290,]),'ForClause':([210,],[244,]),'RangeClause':([210,],[245,]),'ExpressionIdentListOpt':([210,],[248,]),'ExpressionIdentifier':([210,],[249,]),'assign_op':([211,250,],[251,251,]),'AssignOp':([211,250,],[252,252,]),'ElseOpt':([274,],[285,]),'ConditionOpt':([276,],[288,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',46),
  ('Type -> TypeToken','Type',1,'p_type','parser.py',57),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',58),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',59),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',68),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',69),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',70),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',71),
  ('TypeToken -> TYPE IDENT','TypeToken',2,'p_type_token','parser.py',72),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',86),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',87),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',88),
  ('ArrayType -> LBRACK ArrayLength RBRACK ElementType','ArrayType',4,'p_array_type','parser.py',97),
  ('ArrayLength -> INT_LITERAL','ArrayLength',1,'p_array_length','parser.py',106),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',111),
  ('StructType -> STRUCT LBRACE FieldDeclRep RBRACE','StructType',4,'p_struct_type','parser.py',120),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',127),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',128),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',137),
  ('PointerType -> MUL BaseType','PointerType',2,'p_point_type','parser.py',152),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',159),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',168),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',173),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',174),
  ('Result -> Parameters','Result',1,'p_result','parser.py',179),
  ('Result -> Type','Result',1,'p_result','parser.py',180),
  ('Parameters -> LPAREN ParameterListOpt RPAREN','Parameters',3,'p_params','parser.py',185),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',191),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',192),
  ('ParametersList -> Type','ParametersList',1,'p_param_list','parser.py',197),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_param_list','parser.py',198),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',199),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',204),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',205),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',210),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',211),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_block','parser.py',218),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',224),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',230),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',231),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',242),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',243),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',244),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',249),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',250),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',258),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',259),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',268),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',269),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','parser.py',277),
  ('IdentifierList -> IDENT IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',302),
  ('IdentifierRep -> IdentifierRep COMMA IDENT','IdentifierRep',3,'p_identifier_rep','parser.py',314),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',315),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',327),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',337),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',338),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',353),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',354),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',363),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',364),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',373),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',374),
  ('AliasDecl -> IDENT ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',380),
  ('TypeDef -> IDENT Type','TypeDef',2,'p_type_def','parser.py',387),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',400),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',401),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',413),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',414),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',423),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',424),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',453),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',454),
  ('ShortVarDecl -> IDENT DEFINE Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',468),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',488),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',489),
  ('FunctionName -> IDENT','FunctionName',1,'p_func_name','parser.py',493),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',497),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',501),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',507),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',508),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',509),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',517),
  ('BasicLit -> INT_LITERAL','BasicLit',1,'p_basic_lit','parser.py',522),
  ('BasicLit -> FLOAT_LITERAL','BasicLit',1,'p_basic_lit','parser.py',523),
  ('BasicLit -> STRING_LITERAL','BasicLit',1,'p_basic_lit','parser.py',524),
  ('OperandName -> IDENT','OperandName',1,'p_operand_name','parser.py',529),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',537),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',538),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',539),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',540),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',541),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',542),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',543),
  ('Selector -> PERIOD IDENT','Selector',2,'p_selector','parser.py',548),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_index','parser.py',553),
  ('Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK','Slice',5,'p_slice','parser.py',557),
  ('Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK','Slice',7,'p_slice','parser.py',558),
  ('TypeAssertion -> PERIOD LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',562),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',567),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',572),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',573),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',580),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',581),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',586),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',587),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',591),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',592),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',593),
  ('BinaryOp -> LOR','BinaryOp',1,'p_binary_op','parser.py',598),
  ('BinaryOp -> LAND','BinaryOp',1,'p_binary_op','parser.py',599),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',600),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',601),
  ('RelOp -> EQL','RelOp',1,'p_rel_op','parser.py',606),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','parser.py',607),
  ('RelOp -> LSS','RelOp',1,'p_rel_op','parser.py',608),
  ('RelOp -> GTR','RelOp',1,'p_rel_op','parser.py',609),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',610),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',611),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',616),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',617),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',618),
  ('AddMulOp -> QUO','AddMulOp',1,'p_add_mul_op','parser.py',619),
  ('AddMulOp -> REM','AddMulOp',1,'p_add_mul_op','parser.py',620),
  ('AddMulOp -> SHL','AddMulOp',1,'p_add_mul_op','parser.py',621),
  ('AddMulOp -> SHR','AddMulOp',1,'p_add_mul_op','parser.py',622),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','parser.py',627),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','parser.py',628),
  ('UnaryOp -> MUL','UnaryOp',1,'p_unary_op','parser.py',629),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',630),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',637),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',644),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',645),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',646),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',647),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',648),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',649),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',650),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',651),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',656),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',657),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',658),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',659),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',660),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',664),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','parser.py',669),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','parser.py',670),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',675),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',680),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',685),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',686),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',687),
  ('AssignOp -> QUO_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',688),
  ('AssignOp -> REM_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',689),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',690),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',691),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',692),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',693),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',694),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',695),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',700),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',704),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',705),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',706),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',717),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',722),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',723),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',724),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',725),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',730),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',735),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',740),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',741),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',746),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',751),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',752),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',757),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',762),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',767),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',768),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_break','parser.py',773),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_continue','parser.py',777),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',785),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',790),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',791),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',796),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',797),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',808),
  ('PackageName -> IDENT','PackageName',1,'p_package_name','parser.py',815),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',825),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',826),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',830),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',831),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',836),
  ('PackageNameDotOpt -> PERIOD','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',840),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',841),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',842),
  ('ImportPath -> STRING_LITERAL','ImportPath',1,'p_import_path','parser.py',847),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',853),
]
