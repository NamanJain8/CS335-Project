
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNNOTleftLORleftLANDleftORleftXORleftANDleftEQLNEQleftLSSGTRLEQGEQleftSHLSHRleftADDSUBleftMULQUOREMADD ADD_ASSIGN AND AND_ASSIGN AND_NOT AND_NOT_ASSIGN ARROW ASSIGN BOOL BREAK CASE CHAN CHAR COLON COMMA COMPLEX CONST CONTINUE DEC DEFAULT DEFER DEFINE ELLIPSIS ELSE EQL FALLTHROUGH FLOAT FLOAT_LITERAL FOR FUNC GEQ GO GOTO GTR IDENT IF IMAG IMPORT INC INT INTERFACE INT_LITERAL LAND LBRACE LBRACK LEQ LOR LPAREN LSS MAP MUL MUL_ASSIGN NEQ NOT OR OR_ASSIGN PACKAGE PERIOD QUO QUO_ASSIGN RANGE RBRACE RBRACK REM REM_ASSIGN RETURN RPAREN SELECT SEMICOLON SHL SHL_ASSIGN SHR SHR_ASSIGN STRING STRING_LITERAL STRUCT SUB SUB_ASSIGN SWITCH TYPE TYPECAST VAR XOR XOR_ASSIGNstart : SourceFileType : TypeToken\n                    | TypeLit\n                    | LPAREN Type RPARENTypeToken : INT\n                             | FLOAT\n                             | STRING\n                             | BOOL\n                             | COMPLEX\n                             | TYPE IDENTTypeLit : ArrayType\n                       | StructType\n                       | PointerTypeArrayType : LBRACK ArrayLength RBRACK ElementType ArrayLength : INT_LITERAL ElementType : Type StructType : STRUCT LBRACE FieldDeclRep RBRACE FieldDeclRep : FieldDeclRep FieldDecl SEMICOLON\n                                    | epsilon  FieldDecl : IdentifierList TypePointerType : MUL BaseTypeBaseType : TypeSignature : Parameters ResultOptResultOpt : Result\n                             | epsilonResult : Parameters\n                      | TypeParameters : LPAREN ParameterListOpt RPARENParameterListOpt : ParametersList\n                                                     | epsilonParametersList : Type\n                                      | IdentifierList Type\n                                      | ParameterDeclCommaRepParameterDeclCommaRep : ParameterDeclCommaRep COMMA ParameterDecl\n                                                     | ParameterDecl COMMA ParameterDeclParameterDecl : IdentifierList Type\n                                     | TypeBlock : LBRACE StatementList RBRACEStatementList : StatementRepStatementRep : StatementRep Statement SEMICOLON\n                                    | epsilonDeclaration : ConstDecl\n                                   | TypeDecl\n                                   | VarDeclTopLevelDecl : Declaration\n                                    | FunctionDeclConstDecl : CONST ConstSpec\n                             | CONST LPAREN ConstSpecRep RPARENConstSpecRep : ConstSpecRep ConstSpec SEMICOLON\n                                    | epsilonConstSpec : IdentifierList Type ASSIGN ExpressionListIdentifierList : IDENT IdentifierRepIdentifierRep : IdentifierRep COMMA IDENT\n                                     | epsilonExpressionList : Expression ExpressionRepExpressionRep : ExpressionRep COMMA Expression\n                                     | epsilonTypeDecl : TYPE TypeSpec\n                            | TYPE LPAREN TypeSpecRep RPARENTypeSpecRep : TypeSpecRep TypeSpec SEMICOLON\n                               | epsilonTypeSpec : AliasDecl\n                            | TypeDefAliasDecl : IDENT ASSIGN TypeTypeDef : IDENT TypeVarDecl : VAR VarSpec\n                       | VAR LPAREN VarSpecRep RPARENVarSpecRep : VarSpecRep VarSpec SEMICOLON\n                              | epsilonVarSpec : IdentifierList Type ExpressionListOpt\n                       | IdentifierList ASSIGN ExpressionListExpressionListOpt : ASSIGN ExpressionList\n                                             | epsilon ShortVarDecl : IDENT DEFINE Expression FunctionDecl : FUNC FunctionName Function\n                                    | FUNC FunctionName SignatureFunctionName : IDENTFunction : Signature FunctionBodyFunctionBody : BlockOperand : Literal\n                       | OperandName\n                       | LPAREN Expression RPARENLiteral : BasicLitBasicLit : INT_LITERAL\n                            | FLOAT_LITERAL\n                            | STRING_LITERAL\n                            OperandName : IDENTPrimaryExpr : Operand\n                               | PrimaryExpr Selector\n                               | Conversion\n                               | PrimaryExpr Index\n                               | PrimaryExpr Slice\n                               | PrimaryExpr TypeAssertion\n                               | PrimaryExpr ArgumentsSelector : PERIOD IDENTIndex : LBRACK Expression RBRACKSlice : LBRACK ExpressionOpt COLON ExpressionOpt RBRACK\n                     | LBRACK ExpressionOpt COLON Expression COLON Expression RBRACKTypeAssertion : PERIOD LPAREN Type RPARENArguments : LPAREN ExpressionListTypeOpt RPARENExpressionListTypeOpt : ExpressionList\n                                                     | epsilonExpression : UnaryExpr\n                              | Expression BinaryOp ExpressionExpressionOpt : Expression\n                                     | epsilonUnaryExpr : PrimaryExpr\n                             | UnaryOp UnaryExpr\n                             | NOT UnaryExprBinaryOp : LOR\n                            | LAND\n                            | RelOp\n                            | AddMulOpRelOp : EQL\n                     | NEQ\n                     | LSS\n                     | GTR\n                     | LEQ\n                     | GEQAddMulOp : UnaryOp\n                            | OR\n                            | XOR\n                            | QUO\n                            | REM\n                            | SHL\n                            | SHRUnaryOp : ADD\n                       | SUB\n                       | MUL\n                       | AND Conversion : TYPECAST Type LPAREN Expression RPARENStatement : Declaration\n                             | SimpleStmt\n                             | ReturnStmt\n                             | BreakStmt\n                             | ContinueStmt\n                             | Block\n                             | IfStmt\n                             | ForStmt  SimpleStmt : epsilon\n                                   | ExpressionStmt\n                                   | IncDecStmt\n                                   | Assignment\n                                   | ShortVarDecl  ExpressionStmt : Expression  IncDecStmt : Expression INC\n                                   | Expression DEC  Assignment : ExpressionList assign_op ExpressionList assign_op : AssignOp AssignOp : ADD_ASSIGN\n                             | SUB_ASSIGN\n                             | MUL_ASSIGN\n                             | QUO_ASSIGN\n                             | REM_ASSIGN\n                             | AND_ASSIGN\n                             | OR_ASSIGN\n                             | XOR_ASSIGN\n                             | SHL_ASSIGN\n                             | SHR_ASSIGN\n                             | ASSIGN  IfStmt : IF Expression Block ElseOpt  ElseOpt : ELSE IfStmt\n                            | ELSE Block\n                            | epsilon ForStmt : FOR ConditionBlockOpt BlockConditionBlockOpt : epsilon\n                           | Condition\n                           | ForClause\n                           | RangeClauseCondition : Expression ForClause : SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmtConditionOpt : epsilon\n                    | Condition RangeClause : ExpressionIdentListOpt RANGE ExpressionExpressionIdentListOpt : epsilon\n                           | ExpressionIdentifierExpressionIdentifier : ExpressionList ASSIGNReturnStmt : RETURN ExpressionListPureOptExpressionListPureOpt : ExpressionList\n                           | epsilonBreakStmt : BREAKContinueStmt : CONTINUESourceFile : PackageClause SEMICOLON ImportDeclRep TopLevelDeclRepImportDeclRep : epsilon\n                     | ImportDeclRep ImportDecl SEMICOLONTopLevelDeclRep : TopLevelDeclRep TopLevelDecl SEMICOLON\n                                           | epsilonPackageClause : PACKAGE PackageNamePackageName : IDENTImportDecl : IMPORT ImportSpec\n                    | IMPORT LPAREN ImportSpecRep RPAREN  ImportSpecRep : ImportSpecRep ImportSpec SEMICOLON\n                          | epsilon  ImportSpec : PackageNameDotOpt ImportPath  PackageNameDotOpt : PERIOD\n                                                  | PackageName\n                                                  | epsilon ImportPath : STRING_LITERAL epsilon : '
    
_lr_action_items = {'PACKAGE':([0,],[4,]),'$end':([1,2,5,8,9,10,12,24,31,],[0,-1,-199,-199,-184,-183,-187,-185,-186,]),'SEMICOLON':([3,6,7,11,14,15,16,17,18,19,25,34,38,40,41,43,48,49,50,51,52,57,58,60,61,62,63,64,66,67,68,77,80,82,83,84,85,86,87,88,89,90,91,100,101,104,108,109,111,112,113,114,115,116,118,119,120,121,122,125,126,131,132,135,136,137,138,139,142,143,145,150,151,158,159,161,179,180,181,182,183,187,188,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,218,219,220,221,224,225,233,235,236,237,238,240,241,243,247,248,268,269,271,273,275,276,277,280,281,282,285,286,288,289,290,291,292,294,296,297,301,],[5,-188,-189,24,31,-45,-46,-42,-43,-44,-190,-47,-58,-62,-63,-66,-194,-198,-75,-76,-199,-2,-3,-5,-6,-7,-8,-9,-11,-12,-13,-65,-199,-191,140,-78,-79,-199,-26,-23,-24,-25,-27,-48,149,-10,-21,-22,-59,156,-64,-67,157,-70,-73,-71,-199,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-199,-41,-28,-51,-4,-72,-55,-57,-89,-91,-92,-93,-94,-108,-109,-38,235,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-199,-181,-182,-145,-199,-87,-14,-16,-17,267,-104,-95,-82,-40,-178,-179,-180,-146,-147,-140,-145,277,-20,-56,-96,-100,-199,-165,-199,-148,-74,-99,-131,-161,-164,298,-172,-173,-170,-97,-162,-163,-98,]),'IDENT':([4,13,20,21,22,23,26,35,39,44,46,47,53,54,55,65,74,75,78,79,81,86,92,102,107,110,117,123,124,127,128,129,130,133,140,142,143,147,148,149,153,154,156,157,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,184,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,267,272,277,278,279,295,298,],[7,7,33,37,42,37,-199,-199,-199,-199,7,-193,37,37,-50,104,42,-61,37,-69,136,-199,37,136,-199,155,136,136,136,-127,-128,-129,-130,136,-192,213,-41,37,37,-49,37,-19,-60,-68,136,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,225,136,136,136,136,213,136,136,-40,136,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,136,-18,136,136,136,-160,136,213,]),'IMPORT':([5,8,9,24,],[-199,13,-184,-185,]),'FUNC':([5,8,9,10,12,24,31,],[-199,-199,-184,20,-187,-185,-186,]),'CONST':([5,8,9,10,12,24,31,86,142,143,235,],[-199,-199,-184,21,-187,-185,-186,-199,21,-41,-40,]),'TYPE':([5,8,9,10,12,24,31,36,37,42,45,52,53,59,71,72,73,76,86,92,97,134,142,143,145,147,148,152,155,215,222,226,235,],[-199,-199,-184,22,-187,-185,-186,65,-199,65,65,65,65,65,65,-52,-54,65,-199,65,65,65,22,-41,-28,65,65,65,-53,65,65,65,-40,]),'VAR':([5,8,9,10,12,24,31,86,142,143,235,],[-199,-199,-184,23,-187,-185,-186,-199,23,-41,-40,]),'STRING_LITERAL':([7,13,26,27,28,29,30,46,47,81,86,102,117,123,124,127,128,129,130,133,140,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,272,277,278,279,295,298,],[-189,-199,-199,49,-195,-196,-197,-199,-193,139,-199,139,139,139,139,-127,-128,-129,-130,139,-192,139,-41,139,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,139,139,139,139,139,139,139,-40,139,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,139,139,139,139,-160,139,139,]),'LPAREN':([13,21,22,23,32,33,36,37,42,45,52,53,57,58,59,60,61,62,63,64,66,67,68,71,72,73,76,81,86,92,97,102,104,108,109,117,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,147,148,151,152,155,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,190,206,209,211,213,215,218,219,220,222,223,225,226,233,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,271,272,273,277,278,279,282,285,294,295,298,301,],[26,35,39,44,53,-77,59,-199,59,59,92,59,-2,-3,59,-5,-6,-7,-8,-9,-11,-12,-13,59,-52,-54,59,133,-199,59,59,133,-10,-21,-22,133,186,133,133,-88,-90,-127,-128,-129,-130,-80,-81,133,59,-83,-87,-84,-85,-86,133,-41,-28,59,59,-4,59,-53,133,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-89,-91,-92,-93,-94,226,133,133,234,133,133,133,-87,59,-14,-16,-17,59,133,-95,59,-82,133,-40,133,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,133,-96,133,-100,133,133,-160,-99,-131,-97,133,133,-98,]),'PERIOD':([13,26,46,47,122,125,126,131,132,135,136,137,138,139,140,179,180,181,182,183,213,225,233,271,273,282,285,294,301,],[28,-199,28,-193,184,-88,-90,-80,-81,-83,-87,-84,-85,-86,-192,-89,-91,-92,-93,-94,-87,-95,-82,-96,-100,-99,-131,-97,-98,]),'RPAREN':([26,35,39,44,46,47,53,54,55,57,58,60,61,62,63,64,66,67,68,74,75,78,79,92,93,94,95,96,98,103,104,108,109,120,121,122,125,126,131,132,135,136,137,138,139,140,144,146,149,151,156,157,159,161,179,180,181,182,183,186,187,188,189,214,216,217,218,219,220,224,225,230,231,232,233,266,269,270,271,273,274,282,285,294,301,],[-199,-199,-199,-199,82,-193,-199,100,-50,-2,-3,-5,-6,-7,-8,-9,-11,-12,-13,111,-61,114,-69,-199,145,-29,-30,-31,-33,151,-10,-21,-22,-199,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-192,151,-32,-49,-4,-60,-68,-55,-57,-89,-91,-92,-93,-94,-199,-108,-109,233,-34,-37,-35,-14,-16,-17,-104,-95,273,-101,-102,-82,-36,-56,282,-96,-100,285,-99,-131,-97,-98,]),'INT':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[60,-199,60,60,60,60,60,60,-52,-54,60,60,60,60,-28,60,60,60,-53,60,60,60,]),'FLOAT':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[61,-199,61,61,61,61,61,61,-52,-54,61,61,61,61,-28,61,61,61,-53,61,61,61,]),'STRING':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[62,-199,62,62,62,62,62,62,-52,-54,62,62,62,62,-28,62,62,62,-53,62,62,62,]),'BOOL':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[63,-199,63,63,63,63,63,63,-52,-54,63,63,63,63,-28,63,63,63,-53,63,63,63,]),'COMPLEX':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[64,-199,64,64,64,64,64,64,-52,-54,64,64,64,64,-28,64,64,64,-53,64,64,64,]),'LBRACK':([36,37,42,45,52,53,59,71,72,73,76,92,97,122,125,126,131,132,134,135,136,137,138,139,145,147,148,152,155,179,180,181,182,183,213,215,222,225,226,233,271,273,282,285,294,301,],[69,-199,69,69,69,69,69,69,-52,-54,69,69,69,185,-88,-90,-80,-81,69,-83,-87,-84,-85,-86,-28,69,69,69,-53,-89,-91,-92,-93,-94,-87,69,69,-95,69,-82,-96,-100,-99,-131,-97,-98,]),'STRUCT':([36,37,42,45,52,53,59,71,72,73,76,92,97,134,145,147,148,152,155,215,222,226,],[70,-199,70,70,70,70,70,70,-52,-54,70,70,70,70,-28,70,70,70,-53,70,70,70,]),'MUL':([36,37,42,45,52,53,59,71,72,73,76,81,86,92,97,102,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,142,143,145,147,148,152,155,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,188,189,206,209,210,211,213,215,222,223,224,225,226,227,233,234,235,239,247,252,253,254,255,256,257,258,259,260,261,262,263,264,265,269,271,272,273,274,277,278,279,281,282,284,285,292,293,294,295,298,299,301,],[71,-199,71,71,71,71,71,71,-52,-54,71,129,-199,71,71,129,129,129,-103,-107,129,129,-88,-90,-127,-128,-129,-130,-80,-81,129,71,-83,-87,-84,-85,-86,129,-41,-28,71,71,71,-53,129,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-89,-91,-92,-93,-94,129,129,-108,-109,129,129,129,129,129,-87,71,71,129,129,-95,71,129,-82,129,-40,129,129,129,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,129,129,-96,129,-100,129,129,129,-160,129,-99,129,-131,129,129,-97,129,129,129,-98,]),'COMMA':([37,57,58,60,61,62,63,64,66,67,68,72,73,96,98,99,104,108,109,120,121,122,125,126,131,132,135,136,137,138,139,144,146,151,155,159,161,179,180,181,182,183,187,188,210,213,214,216,217,218,219,220,224,225,233,247,266,269,271,273,282,285,294,301,],[-199,-2,-3,-5,-6,-7,-8,-9,-11,-12,-13,110,-54,-37,147,148,-10,-21,-22,-199,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-37,-36,-4,-53,223,-57,-89,-91,-92,-93,-94,-108,-109,-199,-87,-34,-37,-35,-14,-16,-17,-104,-95,-82,-199,-36,-56,-96,-100,-99,-131,-97,-98,]),'ASSIGN':([37,42,45,56,57,58,60,61,62,63,64,66,67,68,72,73,80,104,108,109,121,122,125,126,131,132,135,136,137,138,139,151,155,159,161,179,180,181,182,183,187,188,210,212,213,218,219,220,224,225,233,247,251,269,271,273,282,285,294,301,],[-199,76,81,102,-2,-3,-5,-6,-7,-8,-9,-11,-12,-13,-52,-54,117,-10,-21,-22,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-4,-53,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,264,-87,-14,-16,-17,-104,-95,-82,-199,279,-56,-96,-100,-99,-131,-97,-98,]),'LBRACE':([51,52,57,58,60,61,62,63,64,66,67,68,70,86,87,88,89,90,91,104,108,109,120,121,122,125,126,131,132,135,136,137,138,139,142,143,145,151,159,161,179,180,181,182,183,187,188,201,202,203,204,205,210,211,213,218,219,220,224,225,233,235,239,240,241,242,243,244,245,246,247,269,271,273,280,281,282,285,287,293,294,298,300,301,],[86,-199,-2,-3,-5,-6,-7,-8,-9,-11,-12,-13,107,-199,-26,-23,-24,-25,-27,-10,-21,-22,-199,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,86,-41,-28,-4,-55,-57,-89,-91,-92,-93,-94,-108,-109,-140,-141,-142,-143,-144,-145,-199,-87,-14,-16,-17,-104,-95,-82,-40,86,-146,-147,86,-166,-167,-168,-169,-170,-56,-96,-100,-148,-74,-99,-131,86,-174,-97,-199,-171,-98,]),'INT_LITERAL':([69,81,86,102,117,123,124,127,128,129,130,133,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,272,277,278,279,295,298,],[106,137,-199,137,137,137,137,-127,-128,-129,-130,137,137,-41,137,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,137,137,137,137,137,137,137,-40,137,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,137,137,137,137,-160,137,137,]),'NOT':([81,86,102,117,123,124,127,128,129,130,133,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,272,277,278,279,295,298,],[124,-199,124,124,124,124,-127,-128,-129,-130,124,124,-41,124,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,124,124,124,124,124,124,124,-40,124,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,124,124,124,124,-160,124,124,]),'ADD':([81,86,102,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,188,189,206,209,210,211,213,223,224,225,227,233,234,235,239,247,252,253,254,255,256,257,258,259,260,261,262,263,264,265,269,271,272,273,274,277,278,279,281,282,284,285,292,293,294,295,298,299,301,],[127,-199,127,127,127,-103,-107,127,127,-88,-90,-127,-128,-129,-130,-80,-81,127,-83,-87,-84,-85,-86,127,-41,127,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-89,-91,-92,-93,-94,127,127,-108,-109,127,127,127,127,127,-87,127,127,-95,127,-82,127,-40,127,127,127,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,127,127,-96,127,-100,127,127,127,-160,127,-99,127,-131,127,127,-97,127,127,127,-98,]),'SUB':([81,86,102,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,188,189,206,209,210,211,213,223,224,225,227,233,234,235,239,247,252,253,254,255,256,257,258,259,260,261,262,263,264,265,269,271,272,273,274,277,278,279,281,282,284,285,292,293,294,295,298,299,301,],[128,-199,128,128,128,-103,-107,128,128,-88,-90,-127,-128,-129,-130,-80,-81,128,-83,-87,-84,-85,-86,128,-41,128,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-89,-91,-92,-93,-94,128,128,-108,-109,128,128,128,128,128,-87,128,128,-95,128,-82,128,-40,128,128,128,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,128,128,-96,128,-100,128,128,128,-160,128,-99,128,-131,128,128,-97,128,128,128,-98,]),'AND':([81,86,102,117,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138,139,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,188,189,206,209,210,211,213,223,224,225,227,233,234,235,239,247,252,253,254,255,256,257,258,259,260,261,262,263,264,265,269,271,272,273,274,277,278,279,281,282,284,285,292,293,294,295,298,299,301,],[130,-199,130,130,130,-103,-107,130,130,-88,-90,-127,-128,-129,-130,-80,-81,130,-83,-87,-84,-85,-86,130,-41,130,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-89,-91,-92,-93,-94,130,130,-108,-109,130,130,130,130,130,-87,130,130,-95,130,-82,130,-40,130,130,130,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,130,130,-96,130,-100,130,130,130,-160,130,-99,130,-131,130,130,-97,130,130,130,-98,]),'TYPECAST':([81,86,102,117,123,124,127,128,129,130,133,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,272,277,278,279,295,298,],[134,-199,134,134,134,134,-127,-128,-129,-130,134,134,-41,134,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,134,134,134,134,134,134,134,-40,134,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,134,134,134,134,-160,134,134,]),'FLOAT_LITERAL':([81,86,102,117,123,124,127,128,129,130,133,142,143,160,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,185,186,206,209,211,223,234,235,252,253,254,255,256,257,258,259,260,261,262,263,264,265,272,277,278,279,295,298,],[138,-199,138,138,138,138,-127,-128,-129,-130,138,138,-41,138,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-124,-125,-126,138,138,138,138,138,138,138,-40,138,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,138,138,138,138,-160,138,138,]),'RETURN':([86,142,143,235,],[-199,206,-41,-40,]),'BREAK':([86,142,143,235,],[-199,207,-41,-40,]),'CONTINUE':([86,142,143,235,],[-199,208,-41,-40,]),'IF':([86,142,143,235,287,],[-199,209,-41,-40,209,]),'FOR':([86,142,143,235,],[-199,211,-41,-40,]),'RBRACE':([86,107,141,142,143,153,154,235,267,],[-199,-199,191,-39,-41,220,-19,-40,-18,]),'RBRACK':([105,106,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,224,225,227,229,233,271,272,273,282,283,284,285,294,299,301,],[152,-15,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,-104,-95,271,-106,-82,-96,-199,-100,-99,294,-105,-131,-97,301,-98,]),'LOR':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[162,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,162,162,-87,162,-95,162,-82,162,162,162,-96,-100,162,162,-99,162,-131,162,162,-97,162,-98,]),'LAND':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[163,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,163,163,-87,163,-95,163,-82,163,163,163,-96,-100,163,163,-99,163,-131,163,163,-97,163,-98,]),'EQL':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[166,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,166,166,-87,166,-95,166,-82,166,166,166,-96,-100,166,166,-99,166,-131,166,166,-97,166,-98,]),'NEQ':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[167,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,167,167,-87,167,-95,167,-82,167,167,167,-96,-100,167,167,-99,167,-131,167,167,-97,167,-98,]),'LSS':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[168,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,168,168,-87,168,-95,168,-82,168,168,168,-96,-100,168,168,-99,168,-131,168,168,-97,168,-98,]),'GTR':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[169,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,169,169,-87,169,-95,169,-82,169,169,169,-96,-100,169,169,-99,169,-131,169,169,-97,169,-98,]),'LEQ':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[170,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,170,170,-87,170,-95,170,-82,170,170,170,-96,-100,170,170,-99,170,-131,170,170,-97,170,-98,]),'GEQ':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[171,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,171,171,-87,171,-95,171,-82,171,171,171,-96,-100,171,171,-99,171,-131,171,171,-97,171,-98,]),'OR':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[173,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,173,173,-87,173,-95,173,-82,173,173,173,-96,-100,173,173,-99,173,-131,173,173,-97,173,-98,]),'XOR':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[174,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,174,174,-87,174,-95,174,-82,174,174,174,-96,-100,174,174,-99,174,-131,174,174,-97,174,-98,]),'QUO':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[175,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,175,175,-87,175,-95,175,-82,175,175,175,-96,-100,175,175,-99,175,-131,175,175,-97,175,-98,]),'REM':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[176,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,176,176,-87,176,-95,176,-82,176,176,176,-96,-100,176,176,-99,176,-131,176,176,-97,176,-98,]),'SHL':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[177,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,177,177,-87,177,-95,177,-82,177,177,177,-96,-100,177,177,-99,177,-131,177,177,-97,177,-98,]),'SHR':([120,121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,189,210,213,224,225,227,233,239,247,269,271,273,274,281,282,284,285,292,293,294,299,301,],[178,-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,178,178,-87,178,-95,178,-82,178,178,178,-96,-100,178,178,-99,178,-131,178,178,-97,178,-98,]),'INC':([121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,210,213,224,225,233,247,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,240,-87,-104,-95,-82,240,-96,-100,-99,-131,-97,-98,]),'DEC':([121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,187,188,210,213,224,225,233,247,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-108,-109,241,-87,-104,-95,-82,241,-96,-100,-99,-131,-97,-98,]),'ADD_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,254,-87,-104,-95,-82,-199,254,-56,-96,-100,-99,-131,-97,-98,]),'SUB_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,255,-87,-104,-95,-82,-199,255,-56,-96,-100,-99,-131,-97,-98,]),'MUL_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,256,-87,-104,-95,-82,-199,256,-56,-96,-100,-99,-131,-97,-98,]),'QUO_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,257,-87,-104,-95,-82,-199,257,-56,-96,-100,-99,-131,-97,-98,]),'REM_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,258,-87,-104,-95,-82,-199,258,-56,-96,-100,-99,-131,-97,-98,]),'AND_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,259,-87,-104,-95,-82,-199,259,-56,-96,-100,-99,-131,-97,-98,]),'OR_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,260,-87,-104,-95,-82,-199,260,-56,-96,-100,-99,-131,-97,-98,]),'XOR_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,261,-87,-104,-95,-82,-199,261,-56,-96,-100,-99,-131,-97,-98,]),'SHL_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,262,-87,-104,-95,-82,-199,262,-56,-96,-100,-99,-131,-97,-98,]),'SHR_ASSIGN':([121,122,125,126,131,132,135,136,137,138,139,159,161,179,180,181,182,183,187,188,210,212,213,224,225,233,247,251,269,271,273,282,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-55,-57,-89,-91,-92,-93,-94,-108,-109,-199,263,-87,-104,-95,-82,-199,263,-56,-96,-100,-99,-131,-97,-98,]),'COLON':([121,122,125,126,131,132,135,136,137,138,139,179,180,181,182,183,185,187,188,224,225,227,228,229,233,271,273,282,284,285,294,301,],[-103,-107,-88,-90,-80,-81,-83,-87,-84,-85,-86,-89,-91,-92,-93,-94,-199,-108,-109,-104,-95,-105,272,-106,-82,-96,-100,-99,295,-131,-97,-98,]),'ELSE':([191,275,],[-38,287,]),'RANGE':([211,243,249,250,279,],[-199,-175,278,-176,-177,]),'DEFINE':([213,],[265,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'SourceFile':([0,],[2,]),'PackageClause':([0,],[3,]),'PackageName':([4,13,46,],[6,29,29,]),'ImportDeclRep':([5,],[8,]),'epsilon':([5,8,13,26,35,37,39,44,46,52,53,80,86,92,107,120,142,185,186,206,210,211,247,272,275,277,298,],[9,12,30,47,55,73,75,79,30,90,95,118,143,95,154,161,201,229,232,238,161,243,161,229,288,290,201,]),'TopLevelDeclRep':([8,],[10,]),'ImportDecl':([8,],[11,]),'TopLevelDecl':([10,],[14,]),'Declaration':([10,142,],[15,193,]),'FunctionDecl':([10,],[16,]),'ConstDecl':([10,142,],[17,17,]),'TypeDecl':([10,142,],[18,18,]),'VarDecl':([10,142,],[19,19,]),'ImportSpec':([13,46,],[25,83,]),'PackageNameDotOpt':([13,46,],[27,27,]),'FunctionName':([20,],[32,]),'ConstSpec':([21,54,],[34,101,]),'IdentifierList':([21,23,53,54,78,92,147,148,153,],[36,45,97,36,45,97,215,215,222,]),'TypeSpec':([22,74,],[38,112,]),'AliasDecl':([22,74,],[40,40,]),'TypeDef':([22,74,],[41,41,]),'VarSpec':([23,78,],[43,115,]),'ImportSpecRep':([26,],[46,]),'ImportPath':([27,],[48,]),'Function':([32,],[50,]),'Signature':([32,],[51,]),'Parameters':([32,52,],[52,87,]),'ConstSpecRep':([35,],[54,]),'Type':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[56,77,80,91,96,103,109,113,144,146,190,216,216,219,266,268,270,]),'TypeToken':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'TypeLit':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'ArrayType':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'StructType':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'PointerType':([36,42,45,52,53,59,71,76,92,97,134,147,148,152,215,222,226,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'IdentifierRep':([37,],[72,]),'TypeSpecRep':([39,],[74,]),'VarSpecRep':([44,],[78,]),'FunctionBody':([51,],[84,]),'Block':([51,142,239,242,287,],[85,198,275,276,297,]),'ResultOpt':([52,],[88,]),'Result':([52,],[89,]),'ParameterListOpt':([53,92,],[93,93,]),'ParametersList':([53,92,],[94,94,]),'ParameterDeclCommaRep':([53,92,],[98,98,]),'ParameterDecl':([53,92,147,148,],[99,99,214,217,]),'ArrayLength':([69,],[105,]),'BaseType':([71,],[108,]),'ExpressionListOpt':([80,],[116,]),'ExpressionList':([81,102,117,142,186,206,211,252,298,],[119,150,158,212,231,237,251,280,212,]),'Expression':([81,102,117,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[120,120,120,189,210,224,227,120,120,239,247,269,274,120,281,284,292,293,299,210,]),'UnaryExpr':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[121,121,121,187,188,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'PrimaryExpr':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'UnaryOp':([81,102,117,120,123,124,133,142,160,185,186,189,206,209,210,211,223,224,227,234,239,247,252,265,269,272,274,277,278,281,284,292,293,295,298,299,],[123,123,123,172,123,123,123,123,123,123,123,172,123,123,172,123,123,172,172,123,172,172,123,123,172,123,172,123,123,172,172,172,172,123,123,172,]),'Operand':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'Conversion':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'Literal':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,]),'OperandName':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,]),'BasicLit':([81,102,117,123,124,133,142,160,185,186,206,209,211,223,234,252,265,272,277,278,295,298,],[135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,]),'StatementList':([86,],[141,]),'StatementRep':([86,],[142,]),'FieldDeclRep':([107,],[153,]),'ExpressionRep':([120,210,247,],[159,159,159,]),'BinaryOp':([120,189,210,224,227,239,247,269,274,281,284,292,293,299,],[160,160,160,160,160,160,160,160,160,160,160,160,160,160,]),'RelOp':([120,189,210,224,227,239,247,269,274,281,284,292,293,299,],[164,164,164,164,164,164,164,164,164,164,164,164,164,164,]),'AddMulOp':([120,189,210,224,227,239,247,269,274,281,284,292,293,299,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'Selector':([122,],[179,]),'Index':([122,],[180,]),'Slice':([122,],[181,]),'TypeAssertion':([122,],[182,]),'Arguments':([122,],[183,]),'Statement':([142,],[192,]),'SimpleStmt':([142,211,298,],[194,248,300,]),'ReturnStmt':([142,],[195,]),'BreakStmt':([142,],[196,]),'ContinueStmt':([142,],[197,]),'IfStmt':([142,287,],[199,296,]),'ForStmt':([142,],[200,]),'ExpressionStmt':([142,211,298,],[202,202,202,]),'IncDecStmt':([142,211,298,],[203,203,203,]),'Assignment':([142,211,298,],[204,204,204,]),'ShortVarDecl':([142,211,298,],[205,205,205,]),'ElementType':([152,],[218,]),'FieldDecl':([153,],[221,]),'ExpressionOpt':([185,272,],[228,283,]),'ExpressionListTypeOpt':([186,],[230,]),'ExpressionListPureOpt':([206,],[236,]),'ConditionBlockOpt':([211,],[242,]),'Condition':([211,277,],[244,291,]),'ForClause':([211,],[245,]),'RangeClause':([211,],[246,]),'ExpressionIdentListOpt':([211,],[249,]),'ExpressionIdentifier':([211,],[250,]),'assign_op':([212,251,],[252,252,]),'AssignOp':([212,251,],[253,253,]),'ElseOpt':([275,],[286,]),'ConditionOpt':([277,],[289,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> SourceFile','start',1,'p_start','parser.py',46),
  ('Type -> TypeToken','Type',1,'p_type','parser.py',57),
  ('Type -> TypeLit','Type',1,'p_type','parser.py',58),
  ('Type -> LPAREN Type RPAREN','Type',3,'p_type','parser.py',59),
  ('TypeToken -> INT','TypeToken',1,'p_type_token','parser.py',68),
  ('TypeToken -> FLOAT','TypeToken',1,'p_type_token','parser.py',69),
  ('TypeToken -> STRING','TypeToken',1,'p_type_token','parser.py',70),
  ('TypeToken -> BOOL','TypeToken',1,'p_type_token','parser.py',71),
  ('TypeToken -> COMPLEX','TypeToken',1,'p_type_token','parser.py',72),
  ('TypeToken -> TYPE IDENT','TypeToken',2,'p_type_token','parser.py',73),
  ('TypeLit -> ArrayType','TypeLit',1,'p_type_lit','parser.py',91),
  ('TypeLit -> StructType','TypeLit',1,'p_type_lit','parser.py',92),
  ('TypeLit -> PointerType','TypeLit',1,'p_type_lit','parser.py',93),
  ('ArrayType -> LBRACK ArrayLength RBRACK ElementType','ArrayType',4,'p_array_type','parser.py',102),
  ('ArrayLength -> INT_LITERAL','ArrayLength',1,'p_array_length','parser.py',111),
  ('ElementType -> Type','ElementType',1,'p_element_type','parser.py',116),
  ('StructType -> STRUCT LBRACE FieldDeclRep RBRACE','StructType',4,'p_struct_type','parser.py',125),
  ('FieldDeclRep -> FieldDeclRep FieldDecl SEMICOLON','FieldDeclRep',3,'p_field_decl_rep','parser.py',132),
  ('FieldDeclRep -> epsilon','FieldDeclRep',1,'p_field_decl_rep','parser.py',133),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_field_decl','parser.py',142),
  ('PointerType -> MUL BaseType','PointerType',2,'p_point_type','parser.py',157),
  ('BaseType -> Type','BaseType',1,'p_base_type','parser.py',164),
  ('Signature -> Parameters ResultOpt','Signature',2,'p_sign','parser.py',173),
  ('ResultOpt -> Result','ResultOpt',1,'p_result_opt','parser.py',178),
  ('ResultOpt -> epsilon','ResultOpt',1,'p_result_opt','parser.py',179),
  ('Result -> Parameters','Result',1,'p_result','parser.py',184),
  ('Result -> Type','Result',1,'p_result','parser.py',185),
  ('Parameters -> LPAREN ParameterListOpt RPAREN','Parameters',3,'p_params','parser.py',190),
  ('ParameterListOpt -> ParametersList','ParameterListOpt',1,'p_param_list_opt','parser.py',196),
  ('ParameterListOpt -> epsilon','ParameterListOpt',1,'p_param_list_opt','parser.py',197),
  ('ParametersList -> Type','ParametersList',1,'p_param_list','parser.py',202),
  ('ParametersList -> IdentifierList Type','ParametersList',2,'p_param_list','parser.py',203),
  ('ParametersList -> ParameterDeclCommaRep','ParametersList',1,'p_param_list','parser.py',204),
  ('ParameterDeclCommaRep -> ParameterDeclCommaRep COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',209),
  ('ParameterDeclCommaRep -> ParameterDecl COMMA ParameterDecl','ParameterDeclCommaRep',3,'p_param_decl_comma_rep','parser.py',210),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_param_decl','parser.py',215),
  ('ParameterDecl -> Type','ParameterDecl',1,'p_param_decl','parser.py',216),
  ('Block -> LBRACE StatementList RBRACE','Block',3,'p_block','parser.py',223),
  ('StatementList -> StatementRep','StatementList',1,'p_stat_list','parser.py',229),
  ('StatementRep -> StatementRep Statement SEMICOLON','StatementRep',3,'p_stat_rep','parser.py',235),
  ('StatementRep -> epsilon','StatementRep',1,'p_stat_rep','parser.py',236),
  ('Declaration -> ConstDecl','Declaration',1,'p_decl','parser.py',247),
  ('Declaration -> TypeDecl','Declaration',1,'p_decl','parser.py',248),
  ('Declaration -> VarDecl','Declaration',1,'p_decl','parser.py',249),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_toplevel_decl','parser.py',254),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_toplevel_decl','parser.py',255),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_const_decl','parser.py',263),
  ('ConstDecl -> CONST LPAREN ConstSpecRep RPAREN','ConstDecl',4,'p_const_decl','parser.py',264),
  ('ConstSpecRep -> ConstSpecRep ConstSpec SEMICOLON','ConstSpecRep',3,'p_const_spec_rep','parser.py',273),
  ('ConstSpecRep -> epsilon','ConstSpecRep',1,'p_const_spec_rep','parser.py',274),
  ('ConstSpec -> IdentifierList Type ASSIGN ExpressionList','ConstSpec',4,'p_const_spec','parser.py',282),
  ('IdentifierList -> IDENT IdentifierRep','IdentifierList',2,'p_identifier_list','parser.py',307),
  ('IdentifierRep -> IdentifierRep COMMA IDENT','IdentifierRep',3,'p_identifier_rep','parser.py',319),
  ('IdentifierRep -> epsilon','IdentifierRep',1,'p_identifier_rep','parser.py',320),
  ('ExpressionList -> Expression ExpressionRep','ExpressionList',2,'p_expr_list','parser.py',332),
  ('ExpressionRep -> ExpressionRep COMMA Expression','ExpressionRep',3,'p_expr_rep','parser.py',342),
  ('ExpressionRep -> epsilon','ExpressionRep',1,'p_expr_rep','parser.py',343),
  ('TypeDecl -> TYPE TypeSpec','TypeDecl',2,'p_type_decl','parser.py',358),
  ('TypeDecl -> TYPE LPAREN TypeSpecRep RPAREN','TypeDecl',4,'p_type_decl','parser.py',359),
  ('TypeSpecRep -> TypeSpecRep TypeSpec SEMICOLON','TypeSpecRep',3,'p_type_spec_rep','parser.py',368),
  ('TypeSpecRep -> epsilon','TypeSpecRep',1,'p_type_spec_rep','parser.py',369),
  ('TypeSpec -> AliasDecl','TypeSpec',1,'p_type_spec','parser.py',378),
  ('TypeSpec -> TypeDef','TypeSpec',1,'p_type_spec','parser.py',379),
  ('AliasDecl -> IDENT ASSIGN Type','AliasDecl',3,'p_alias_decl','parser.py',385),
  ('TypeDef -> IDENT Type','TypeDef',2,'p_type_def','parser.py',392),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_var_decl','parser.py',405),
  ('VarDecl -> VAR LPAREN VarSpecRep RPAREN','VarDecl',4,'p_var_decl','parser.py',406),
  ('VarSpecRep -> VarSpecRep VarSpec SEMICOLON','VarSpecRep',3,'p_var_spec_rep','parser.py',418),
  ('VarSpecRep -> epsilon','VarSpecRep',1,'p_var_spec_rep','parser.py',419),
  ('VarSpec -> IdentifierList Type ExpressionListOpt','VarSpec',3,'p_var_spec','parser.py',428),
  ('VarSpec -> IdentifierList ASSIGN ExpressionList','VarSpec',3,'p_var_spec','parser.py',429),
  ('ExpressionListOpt -> ASSIGN ExpressionList','ExpressionListOpt',2,'p_expr_list_opt','parser.py',458),
  ('ExpressionListOpt -> epsilon','ExpressionListOpt',1,'p_expr_list_opt','parser.py',459),
  ('ShortVarDecl -> IDENT DEFINE Expression','ShortVarDecl',3,'p_short_var_decl','parser.py',473),
  ('FunctionDecl -> FUNC FunctionName Function','FunctionDecl',3,'p_func_decl','parser.py',493),
  ('FunctionDecl -> FUNC FunctionName Signature','FunctionDecl',3,'p_func_decl','parser.py',494),
  ('FunctionName -> IDENT','FunctionName',1,'p_func_name','parser.py',498),
  ('Function -> Signature FunctionBody','Function',2,'p_func','parser.py',502),
  ('FunctionBody -> Block','FunctionBody',1,'p_func_body','parser.py',506),
  ('Operand -> Literal','Operand',1,'p_operand','parser.py',512),
  ('Operand -> OperandName','Operand',1,'p_operand','parser.py',513),
  ('Operand -> LPAREN Expression RPAREN','Operand',3,'p_operand','parser.py',514),
  ('Literal -> BasicLit','Literal',1,'p_literal','parser.py',522),
  ('BasicLit -> INT_LITERAL','BasicLit',1,'p_basic_lit','parser.py',527),
  ('BasicLit -> FLOAT_LITERAL','BasicLit',1,'p_basic_lit','parser.py',528),
  ('BasicLit -> STRING_LITERAL','BasicLit',1,'p_basic_lit','parser.py',529),
  ('OperandName -> IDENT','OperandName',1,'p_operand_name','parser.py',534),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_prim_expr','parser.py',542),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_prim_expr','parser.py',543),
  ('PrimaryExpr -> Conversion','PrimaryExpr',1,'p_prim_expr','parser.py',544),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_prim_expr','parser.py',545),
  ('PrimaryExpr -> PrimaryExpr Slice','PrimaryExpr',2,'p_prim_expr','parser.py',546),
  ('PrimaryExpr -> PrimaryExpr TypeAssertion','PrimaryExpr',2,'p_prim_expr','parser.py',547),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_prim_expr','parser.py',548),
  ('Selector -> PERIOD IDENT','Selector',2,'p_selector','parser.py',553),
  ('Index -> LBRACK Expression RBRACK','Index',3,'p_index','parser.py',558),
  ('Slice -> LBRACK ExpressionOpt COLON ExpressionOpt RBRACK','Slice',5,'p_slice','parser.py',562),
  ('Slice -> LBRACK ExpressionOpt COLON Expression COLON Expression RBRACK','Slice',7,'p_slice','parser.py',563),
  ('TypeAssertion -> PERIOD LPAREN Type RPAREN','TypeAssertion',4,'p_type_assert','parser.py',567),
  ('Arguments -> LPAREN ExpressionListTypeOpt RPAREN','Arguments',3,'p_argument','parser.py',572),
  ('ExpressionListTypeOpt -> ExpressionList','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',577),
  ('ExpressionListTypeOpt -> epsilon','ExpressionListTypeOpt',1,'p_expr_list_type_opt','parser.py',578),
  ('Expression -> UnaryExpr','Expression',1,'p_expr','parser.py',585),
  ('Expression -> Expression BinaryOp Expression','Expression',3,'p_expr','parser.py',586),
  ('ExpressionOpt -> Expression','ExpressionOpt',1,'p_expr_opt','parser.py',591),
  ('ExpressionOpt -> epsilon','ExpressionOpt',1,'p_expr_opt','parser.py',592),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_unary_expr','parser.py',596),
  ('UnaryExpr -> UnaryOp UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',597),
  ('UnaryExpr -> NOT UnaryExpr','UnaryExpr',2,'p_unary_expr','parser.py',598),
  ('BinaryOp -> LOR','BinaryOp',1,'p_binary_op','parser.py',603),
  ('BinaryOp -> LAND','BinaryOp',1,'p_binary_op','parser.py',604),
  ('BinaryOp -> RelOp','BinaryOp',1,'p_binary_op','parser.py',605),
  ('BinaryOp -> AddMulOp','BinaryOp',1,'p_binary_op','parser.py',606),
  ('RelOp -> EQL','RelOp',1,'p_rel_op','parser.py',611),
  ('RelOp -> NEQ','RelOp',1,'p_rel_op','parser.py',612),
  ('RelOp -> LSS','RelOp',1,'p_rel_op','parser.py',613),
  ('RelOp -> GTR','RelOp',1,'p_rel_op','parser.py',614),
  ('RelOp -> LEQ','RelOp',1,'p_rel_op','parser.py',615),
  ('RelOp -> GEQ','RelOp',1,'p_rel_op','parser.py',616),
  ('AddMulOp -> UnaryOp','AddMulOp',1,'p_add_mul_op','parser.py',621),
  ('AddMulOp -> OR','AddMulOp',1,'p_add_mul_op','parser.py',622),
  ('AddMulOp -> XOR','AddMulOp',1,'p_add_mul_op','parser.py',623),
  ('AddMulOp -> QUO','AddMulOp',1,'p_add_mul_op','parser.py',624),
  ('AddMulOp -> REM','AddMulOp',1,'p_add_mul_op','parser.py',625),
  ('AddMulOp -> SHL','AddMulOp',1,'p_add_mul_op','parser.py',626),
  ('AddMulOp -> SHR','AddMulOp',1,'p_add_mul_op','parser.py',627),
  ('UnaryOp -> ADD','UnaryOp',1,'p_unary_op','parser.py',632),
  ('UnaryOp -> SUB','UnaryOp',1,'p_unary_op','parser.py',633),
  ('UnaryOp -> MUL','UnaryOp',1,'p_unary_op','parser.py',634),
  ('UnaryOp -> AND','UnaryOp',1,'p_unary_op','parser.py',635),
  ('Conversion -> TYPECAST Type LPAREN Expression RPAREN','Conversion',5,'p_conversion','parser.py',642),
  ('Statement -> Declaration','Statement',1,'p_statement','parser.py',649),
  ('Statement -> SimpleStmt','Statement',1,'p_statement','parser.py',650),
  ('Statement -> ReturnStmt','Statement',1,'p_statement','parser.py',651),
  ('Statement -> BreakStmt','Statement',1,'p_statement','parser.py',652),
  ('Statement -> ContinueStmt','Statement',1,'p_statement','parser.py',653),
  ('Statement -> Block','Statement',1,'p_statement','parser.py',654),
  ('Statement -> IfStmt','Statement',1,'p_statement','parser.py',655),
  ('Statement -> ForStmt','Statement',1,'p_statement','parser.py',656),
  ('SimpleStmt -> epsilon','SimpleStmt',1,'p_simple_stmt','parser.py',661),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_simple_stmt','parser.py',662),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_simple_stmt','parser.py',663),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_simple_stmt','parser.py',664),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_simple_stmt','parser.py',665),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_expression_stmt','parser.py',669),
  ('IncDecStmt -> Expression INC','IncDecStmt',2,'p_inc_dec','parser.py',674),
  ('IncDecStmt -> Expression DEC','IncDecStmt',2,'p_inc_dec','parser.py',675),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_assignment','parser.py',680),
  ('assign_op -> AssignOp','assign_op',1,'p_assign_op','parser.py',685),
  ('AssignOp -> ADD_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',690),
  ('AssignOp -> SUB_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',691),
  ('AssignOp -> MUL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',692),
  ('AssignOp -> QUO_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',693),
  ('AssignOp -> REM_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',694),
  ('AssignOp -> AND_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',695),
  ('AssignOp -> OR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',696),
  ('AssignOp -> XOR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',697),
  ('AssignOp -> SHL_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',698),
  ('AssignOp -> SHR_ASSIGN','AssignOp',1,'p_AssignOp','parser.py',699),
  ('AssignOp -> ASSIGN','AssignOp',1,'p_AssignOp','parser.py',700),
  ('IfStmt -> IF Expression Block ElseOpt','IfStmt',4,'p_if_statement','parser.py',705),
  ('ElseOpt -> ELSE IfStmt','ElseOpt',2,'p_else_opt','parser.py',709),
  ('ElseOpt -> ELSE Block','ElseOpt',2,'p_else_opt','parser.py',710),
  ('ElseOpt -> epsilon','ElseOpt',1,'p_else_opt','parser.py',711),
  ('ForStmt -> FOR ConditionBlockOpt Block','ForStmt',3,'p_for','parser.py',722),
  ('ConditionBlockOpt -> epsilon','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',727),
  ('ConditionBlockOpt -> Condition','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',728),
  ('ConditionBlockOpt -> ForClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',729),
  ('ConditionBlockOpt -> RangeClause','ConditionBlockOpt',1,'p_conditionblockopt','parser.py',730),
  ('Condition -> Expression','Condition',1,'p_condition','parser.py',735),
  ('ForClause -> SimpleStmt SEMICOLON ConditionOpt SEMICOLON SimpleStmt','ForClause',5,'p_forclause','parser.py',740),
  ('ConditionOpt -> epsilon','ConditionOpt',1,'p_conditionopt','parser.py',745),
  ('ConditionOpt -> Condition','ConditionOpt',1,'p_conditionopt','parser.py',746),
  ('RangeClause -> ExpressionIdentListOpt RANGE Expression','RangeClause',3,'p_rageclause','parser.py',751),
  ('ExpressionIdentListOpt -> epsilon','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',756),
  ('ExpressionIdentListOpt -> ExpressionIdentifier','ExpressionIdentListOpt',1,'p_expression_ident_listopt','parser.py',757),
  ('ExpressionIdentifier -> ExpressionList ASSIGN','ExpressionIdentifier',2,'p_expressionidentifier','parser.py',762),
  ('ReturnStmt -> RETURN ExpressionListPureOpt','ReturnStmt',2,'p_return','parser.py',767),
  ('ExpressionListPureOpt -> ExpressionList','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',772),
  ('ExpressionListPureOpt -> epsilon','ExpressionListPureOpt',1,'p_expressionlist_pure_opt','parser.py',773),
  ('BreakStmt -> BREAK','BreakStmt',1,'p_break','parser.py',778),
  ('ContinueStmt -> CONTINUE','ContinueStmt',1,'p_continue','parser.py',782),
  ('SourceFile -> PackageClause SEMICOLON ImportDeclRep TopLevelDeclRep','SourceFile',4,'p_source_file','parser.py',790),
  ('ImportDeclRep -> epsilon','ImportDeclRep',1,'p_import_decl_rep','parser.py',795),
  ('ImportDeclRep -> ImportDeclRep ImportDecl SEMICOLON','ImportDeclRep',3,'p_import_decl_rep','parser.py',796),
  ('TopLevelDeclRep -> TopLevelDeclRep TopLevelDecl SEMICOLON','TopLevelDeclRep',3,'p_toplevel_decl_rep','parser.py',801),
  ('TopLevelDeclRep -> epsilon','TopLevelDeclRep',1,'p_toplevel_decl_rep','parser.py',802),
  ('PackageClause -> PACKAGE PackageName','PackageClause',2,'p_package_clause','parser.py',813),
  ('PackageName -> IDENT','PackageName',1,'p_package_name','parser.py',820),
  ('ImportDecl -> IMPORT ImportSpec','ImportDecl',2,'p_import_decl','parser.py',830),
  ('ImportDecl -> IMPORT LPAREN ImportSpecRep RPAREN','ImportDecl',4,'p_import_decl','parser.py',831),
  ('ImportSpecRep -> ImportSpecRep ImportSpec SEMICOLON','ImportSpecRep',3,'p_import_spec_rep','parser.py',835),
  ('ImportSpecRep -> epsilon','ImportSpecRep',1,'p_import_spec_rep','parser.py',836),
  ('ImportSpec -> PackageNameDotOpt ImportPath','ImportSpec',2,'p_import_spec','parser.py',841),
  ('PackageNameDotOpt -> PERIOD','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',845),
  ('PackageNameDotOpt -> PackageName','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',846),
  ('PackageNameDotOpt -> epsilon','PackageNameDotOpt',1,'p_package_name_dot_opt','parser.py',847),
  ('ImportPath -> STRING_LITERAL','ImportPath',1,'p_import_path','parser.py',852),
  ('epsilon -> <empty>','epsilon',0,'p_empty','parser.py',858),
]
